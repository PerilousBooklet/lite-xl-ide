{
  "import": {
    "prefix": "import",
    "body": [
      "import $1 from '$2'"
    ],
    "description": "import ... from ..."
  },
  "import-type": {
    "prefix": "importType",
    "body": [
      "import type {$1} from '$2'"
    ],
    "description": "import type ... from ..."
  },
  "nextTick": {
    "prefix": "nextTick",
    "body": [
      "nextTick()"
    ],
    "description": "A utility for waiting for the next DOM update flush."
  },
  "defineAsyncComponent": {
    "prefix": "defineAsyncComponent",
    "body": [
      "const $1 = defineAsyncComponent(() =>",
      "import('$0')",
      ");"
    ],
    "description": "create a async vue component"
  },
  "defineComponent": {
    "prefix": "defineComponent",
    "body": [
      "const $1 = defineComponent({",
      "$0",
      "})"
    ],
    "description": "create a component vue component"
  },
  "defineCustomElement": {
    "prefix": "defineCustomElement",
    "body": [
      "const $1 = defineCustomElement({",
      "$0",
      "})"
    ],
    "description": "create a custom element vue"
  },
  "data-options": {
    "prefix": "data",
    "body": [
      "data() {",
      "\treturn {",
      "\t\t$1",
      "\t}",
      "},$0"
    ],
    "description": "The data object for the Vue instance."
  },
  "props-composition": {
    "prefix": "defineProps",
    "body": [
      "const props = defineProps({",
      "$0",
      "});"
    ],
    "description": "A list/hash of attributes that are exposed to accept data from the parent component. "
  },
  "emits-composition": {
    "prefix": "emitsVue",
    "body": [
      "const emits = defineEmits([ $0 ]);"
    ],
    "description": "A list of events that componetnt can emits to the parent component. "
  },
  "computed-options": {
    "prefix": "computed",
    "body": [
      "computed: {",
      "\t$1",
      "},$0"
    ],
    "description": "Computed properties to be mixed into the Vue instance. "
  },
  "computed-composition": {
    "prefix": "computedVue",
    "body": [
      "const $1 = computed(() => {",
      "$0",
      "});"
    ],
    "description": "Computed properties to be mixed into the Vue instance. "
  },
  "reactive-composition": {
    "prefix": "reactiveVue",
    "body": [
      "const $1 = reactive($0)"
    ],
    "description": "Reative properties to be mixed into the Vue instance. "
  },
  "shallow-reactive-composition": {
    "prefix": "sreactVue",
    "body": [
      "const $1 = shallowReactive({$0})"
    ],
    "description": "Shallow reative properties to be mixed into the Vue instance. "
  },
  "ref-composition": {
    "prefix": "refVue",
    "body": [
      "const $1 = ref($2)",
      "$0"
    ],
    "description": "Ref properties to be mixed into the Vue instance. "
  },
  "template-ref-ts-composition": {
    "prefix": "trfVue",
    "body": [
      "const $0 = ref<HTMLInputElement | null>(null)"
    ],
    "description": "Template ref to be mixed into the Vue instance. "
  },
  "component-ref-ts-composition": {
    "prefix": "crfVue",
    "body": [
      "const $1 = ref<InstanceType<typeof $0> | null>(null)"
    ],
    "description": "Template ref to be mixed into the Vue instance. "
  },
  "methods-options": {
    "prefix": "methods",
    "body": [
      "methods: {",
      "\t$1",
      "},$0"
    ],
    "description": "Methods to be mixed into the Vue instance."
  },
  "method-composition": {
    "prefix": "functionVue3",
    "body": [
      "const $1 = ($2) => {",
      "$0",
      "};"
    ],
    "description": "Method composition properties to be mixed into the Vue instance. "
  },
  "watch-options": {
    "prefix": "watch",
    "body": [
      "watch: {",
      "\t$1",
      "},$0"
    ],
    "description": "An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. Note that you should not use an arrow function to define a watcher."
  },
  "watch-composition": {
    "prefix": "cwatch",
    "body": [
      "watch($1, ($2, $3) => {",
      "$0",
      "});"
    ],
    "description": "Watch over a reactive source and call a function in reaction to state changes "
  },
  "watchWithOptions": {
    "prefix": "watchWithOptions",
    "body": [
      "${1:key}: {",
      "\tdeep: ${2:true},",
      "\timmediate: ${3:true},",
      "\thandler: function (${4:val}, ${5:oldVal}) {",
      "\t\t$6",
      "\t}",
      "},$0"
    ],
    "description": "Vue Watcher with options."
  },
  "watchEffect-composition": {
    "prefix": "watchEffect",
    "body": [
      "watchEffect($1, ($2, $3) => {",
      "$0",
      "});"
    ],
    "description": "watchEffect from vue composition "
  },
  "onBeforeMount-composition": {
    "prefix": "onBeforeMount",
    "body": [
      "onBeforeMount(() => {$0})"
    ],
    "description": "Vue before mount composition lifecycle hook"
  },
  "onMounted-composition": {
    "prefix": "onmounted",
    "body": [
      "onMounted(() => {$0})"
    ],
    "description": "Vue mounted lifecycle hook"
  },
  "onBeforeUnmount-composition": {
    "prefix": "onBeforeUnmount",
    "body": [
      "onBeforeUnmount(() => {$0})"
    ],
    "description": "Vue before unmount composition lifecycle hook"
  },
  "onUnmounted-composition": {
    "prefix": "onunmounted",
    "body": [
      "onUnmounted(() => {$0})"
    ],
    "description": "Vue unMounted lifecycle hook"
  },
  "beforeUpdate": {
    "prefix": "beforeUpdate",
    "body": [
      "beforeUpdate() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "updated": {
    "prefix": "updated",
    "body": [
      "updated() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "onBeforeUpdate-composition": {
    "prefix": "onBeforeUpdate",
    "body": [
      "onBeforeUpdate(() => {$0})"
    ],
    "description": "Vue before update composition lifecycle hook"
  },
  "onUpdated-composition": {
    "prefix": "onupdated",
    "body": [
      "onUpdated(() => {$0})"
    ],
    "description": "Vue updated lifecycle hook"
  },
  "activated": {
    "prefix": "activated",
    "body": [
      "activated() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "deactivated": {
    "prefix": "deactivated",
    "body": [
      "deactivated() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "onActivated-composition": {
    "prefix": "onActivated",
    "body": [
      "onActivated(() => {$0})"
    ],
    "description": "Vue activated composition lifecycle hook"
  },
  "onDeactivated-composition": {
    "prefix": "onDeactivated",
    "body": [
      "onDeactivated(() => {$0})"
    ],
    "description": "Vue deactivated composition lifecycle hook"
  },
  "beforeDestroy": {
    "prefix": "beforeDestroy",
    "body": [
      "beforeDestroy() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "destroyed": {
    "prefix": "destroyed",
    "body": [
      "destroyed() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "errorCaptured": {
    "prefix": "errorCaptured",
    "body": [
      "errorCaptured: (err, vm, info) => {",
      "\t$1",
      "},"
    ],
    "description": "Type: (err: Error, vm: Component, info: string) => ?boolean"
  },
  "createRenderer": {
    "prefix": "createRenderer",
    "body": [
      "createRenderer({",
      "\t$1",
      "})"
    ],
    "description": "createRenderer({ })"
  },
  "importVueRouter": {
    "prefix": "importVueRouter",
    "body": [
      "import VueRouter from 'vue-router'"
    ],
    "description": "import VueRouter from 'vue-router'"
  },
  "importuseRouter-composition": {
    "prefix": "importuseRouter",
    "body": [
      "import useRouter from 'vue-router'"
    ],
    "description": "import useRouter from 'vue-router'"
  },
  "newVueRouter": {
    "prefix": "newVueRouter",
    "body": [
      "const ${1:router} = new VueRouter({",
      "\t$2",
      "})$0"
    ],
    "description": "const router = newVueRouter({ })"
  },
  "useRouter-composition": {
    "prefix": "useRouter",
    "body": [
      "const ${1:router} = useRouter()"
    ],
    "description": "const router = useRouter()"
  },
  "useRoute-composition": {
    "prefix": "useRoute",
    "body": [
      "const ${1:route} = useRoute()"
    ],
    "description": "const route = useRoute()"
  },
  "routerBeforeEach": {
    "prefix": "routerBeforeEach",
    "body": [
      "${1:router}.beforeEach((to, from, next) => {",
      "\t${2:// to and from are both route objects. must call `next`.}",
      "})$0"
    ],
    "description": "router.beforeEach"
  },
  "routerBeforeResolve": {
    "prefix": "routerBeforeResolve",
    "body": [
      "${1:router}.beforeResolve((to, from, next) => {",
      "\t${2:// to and from are both route objects. must call `next`.}",
      "})$0"
    ],
    "description": "router.beforeResolve"
  },
  "routerAfterEach": {
    "prefix": "routerAfterEach",
    "body": [
      "${1:router}.afterEach((to, from) => {",
      "\t${2:// to and from are both route objects.}",
      "})$0"
    ],
    "description": "router.afterEach"
  },
  "routerPush": {
    "prefix": "routerPush",
    "body": [
      "${1:router}.push($2)$0"
    ],
    "description": "router.push()"
  },
  "routerReplace": {
    "prefix": "routerReplace",
    "body": [
      "${1:router}.replace($2)$0"
    ],
    "description": "router.replace()"
  },
  "routerGo": {
    "prefix": "routerGo",
    "body": [
      "${1:router}.go($2)$0"
    ],
    "description": "router.go()"
  },
  "routerBack": {
    "prefix": "routerBack",
    "body": [
      "${1:router}.back($2)$0"
    ],
    "description": "router.back()"
  },
  "routerForward": {
    "prefix": "routerForward",
    "body": [
      "${1:router}.forward($2)$0"
    ],
    "description": "router.forward()"
  },
  "routerGetMatchedComponents": {
    "prefix": "routerGetMatchedComponents",
    "body": [
      "${1:router}.getMatchedComponents($2)$0"
    ],
    "description": "router.getMatchedComponents()"
  },
  "routerResolve": {
    "prefix": "routerResolve",
    "body": [
      "${1:router}.resolve($2)$0"
    ],
    "description": "router.resolve()"
  },
  "routerAddRoutes": {
    "prefix": "routerAddRoutes",
    "body": [
      "${1:router}.addRoutes($2)$0"
    ],
    "description": "router.addRoutes()"
  },
  "routerOnReady": {
    "prefix": "routerOnReady",
    "body": [
      "${1:router}.onReady($2)$0"
    ],
    "description": "router.onReady()"
  },
  "routerOnError": {
    "prefix": "routerOnError",
    "body": [
      "${1:router}.onError($2)$0"
    ],
    "description": "router.onError()"
  },
  "routes": {
    "prefix": "routes",
    "body": [
      "routes: [$1]$0"
    ],
    "description": "routes: []"
  },
  "beforeEnter": {
    "prefix": "beforeEnter",
    "body": [
      "beforeEnter: (to, from, next) => {",
      "\t${1:// ...}",
      "}"
    ],
    "description": "beforeEnter: (to, from, next) => { }"
  },
  "beforeRouteEnter": {
    "prefix": "beforeRouteEnter",
    "body": [
      "beforeRouteEnter (to, from, next) {",
      "\t${1:// ...}",
      "}"
    ],
    "description": "beforeRouteEnter (to, from, next) { }"
  },
  "beforeRouteLeave": {
    "prefix": "beforeRouteLeave",
    "body": [
      "beforeRouteLeave (to, from, next) {",
      "\t${1:// ...}",
      "}"
    ],
    "description": "beforeRouteLeave (to, from, next) { }"
  },
  "scrollBehavior": {
    "prefix": "scrollBehavior",
    "body": [
      "scrollBehavior (to, from, savedPosition) {",
      "\t${1:// ...}",
      "}"
    ],
    "description": "scrollBehavior (to, from, savedPosition) { }"
  },
  "path": {
    "prefix": "path",
    "body": [
      "path"
    ],
    "description": "just a word"
  },
  "alias": {
    "prefix": "alias",
    "body": [
      "alias"
    ],
    "description": "just a word"
  },
  "mode": {
    "prefix": "mode",
    "body": [
      "mode"
    ],
    "description": "just a word"
  },
  "children": {
    "prefix": "children",
    "body": [
      "children"
    ],
    "description": "just a word"
  },
  "meta": {
    "prefix": "meta",
    "body": [
      "meta"
    ],
    "description": "just a word"
  },
  "asyncData": {
    "prefix": "asyncData",
    "body": [
      "asyncData({${1:isDev}${2:, route}${3:, store}${4:, env}${5:, params}${6:, query}${7:, req}${8:, res}${9:, redirect}${10:, error}}) {",
      "\t$11",
      "},"
    ],
    "description": "Type: Function."
  },
  "click": {
    "prefix": "click",
    "body": [
      "click"
    ],
    "description": "just a word"
  },
  "submit": {
    "prefix": "submit",
    "body": [
      "submit"
    ],
    "description": "just a word"
  },
  "mouse": {
    "prefix": "mouse",
    "body": [
      "mouse"
    ],
    "description": "just a word"
  },
  "scroll": {
    "prefix": "scroll",
    "body": [
      "scroll"
    ],
    "description": "just a word"
  },
  "keyup": {
    "prefix": "keyup",
    "body": [
      "keyup"
    ],
    "description": "just a word"
  },
  "enter": {
    "prefix": "enter",
    "body": [
      "enter"
    ],
    "description": "just a word"
  },
  "page-down": {
    "prefix": "page-down",
    "body": [
      "page-down"
    ],
    "description": "just a word"
  },
  "stop": {
    "prefix": "stop",
    "body": [
      "stop"
    ],
    "description": "just a word"
  },
  "prevent": {
    "prefix": "prevent",
    "body": [
      "prevent"
    ],
    "description": "just a word"
  },
  "self": {
    "prefix": "self",
    "body": [
      "self"
    ],
    "description": "just a word"
  },
  "capture": {
    "prefix": "capture",
    "body": [
      "capture"
    ],
    "description": "just a word"
  },
  "once": {
    "prefix": "once",
    "body": [
      "once"
    ],
    "description": "just a word"
  },
  "passive": {
    "prefix": "passive",
    "body": [
      "passive"
    ],
    "description": "just a word"
  },
  "onRenderTriggered-composition": {
    "prefix": "onRenderTriggered",
    "body": [
      "onRenderTriggered(() => {$0})"
    ],
    "description": "Vue onRenderTriggered lifecycle hook"
  },
  "onErrorCaptured-composition": {
    "prefix": "onErrorCaptured",
    "body": [
      "onErrorCaptured(() => {$0})"
    ],
    "description": "Vue oneErrorCaptured lifecycle hook"
  },
  "onRenderTracked-composition": {
    "prefix": "onRenderTracked",
    "body": [
      "onRenderTracked(() => {$0})"
    ],
    "description": "Vue onRenderTracked lifecycle hook"
  },
  "onServerPrefetch-compositionSSR": {
    "prefix": "onServerPrefetch",
    "body": [
      "onServerPrefetch(() => {$0})"
    ],
    "description": "Vue onServerPrefetch lifecycle hook SSR Only"
  }
}
